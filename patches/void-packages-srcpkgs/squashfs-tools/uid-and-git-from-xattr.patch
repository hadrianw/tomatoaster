--- squashfs-tools/mksquashfs.c
+++ squashfs-tools/mksquashfs.c
@@ -49,6 +49,7 @@
 #include <sys/wait.h>
 #include <limits.h>
 #include <ctype.h>
+#include <sys/xattr.h>
 
 #ifndef linux
 #define __BYTE_ORDER BYTE_ORDER
@@ -841,6 +842,39 @@ inline unsigned int get_parent_no(struct dir_info *dir)
 	return dir->depth ? get_inode_no(dir->dir_ent->inode) : inode_no;
 }
 
+static int num_from_xattr(char *filename, char *name, unsigned short *out_value)
+{
+	ssize_t vsize;
+	char str_value[16];
+	unsigned short value;
+	char *b;
+
+	vsize = lgetxattr(filename, name, str_value, sizeof(str_value)-1);
+	if(vsize < 0) {
+		/*
+		ERROR("lgetxattr failed for %s in "
+			"num_from_xattr, because %s", filename,
+			strerror(errno));
+		ERROR_EXIT(".  Ignoring");
+		*/
+		return 1;
+	}
+	str_value[vsize] = '\0';
+
+	value = strtoll(str_value, &b, 10);
+	if(*b !='\0') {
+		ERROR("strtoll failed for xattr %s of file %s\n", name, filename);
+		return -1;
+	}
+	if(value < 0 || value > (((long long) 1 << 32) - 1)) {
+		// FIXME: proper error handling
+		ERROR("strtoll out of range for xattr %s of file %s\n", name, filename);
+		return -1;
+	}
+	*out_value = value;
+	return 0;
+}
+
 	
 int create_inode(squashfs_inode *i_no, struct dir_info *dir_info,
 	struct dir_ent *dir_ent, int type, long long byte_size,
@@ -854,6 +888,7 @@ int create_inode(squashfs_inode *i_no, struct dir_info *dir_info,
 	char *filename = pathname(dir_ent);
 	int nlink = dir_ent->inode->nlink;
 	int xattr = read_xattrs(dir_ent);
+	unsigned short id;
 
 	switch(type) {
 	case SQUASHFS_FILE_TYPE:
@@ -890,11 +925,19 @@ int create_inode(squashfs_inode *i_no, struct dir_info *dir_info,
 	}
 			
 	base->mode = SQUASHFS_MODE(buf->st_mode);
-	base->uid = get_uid((unsigned int) global_uid == -1 ?
-		buf->st_uid : global_uid);
+	if(num_from_xattr(filename, "user.escape.uid", &id) == 0) {
+		base->uid = get_uid((unsigned int)id);
+	} else {
+		base->uid = get_uid((unsigned int) global_uid == -1 ?
+			buf->st_uid : global_uid);
+	}
 	base->inode_type = type;
-	base->guid = get_guid((unsigned int) global_gid == -1 ?
-		buf->st_gid : global_gid);
+	if(num_from_xattr(filename, "user.escape.gid", &id) == 0) {
+		base->guid = get_guid((unsigned int)id);
+	} else {
+		base->guid = get_guid((unsigned int) global_gid == -1 ?
+			buf->st_gid : global_gid);
+	}
 	base->mtime = buf->st_mtime;
 	base->inode_number = get_inode_no(dir_ent->inode);
 
diff --git a/squashfs-tools/xattr.c b/squashfs-tools/xattr.c
index b46550c..ea22610 100644
--- squashfs-tools/xattr.c
+++ squashfs-tools/xattr.c
@@ -35,6 +35,7 @@
 #include <string.h>
 #include <stdlib.h>
 #include <sys/xattr.h>
+#include <linux/xattr.h>
 
 #include "squashfs_fs.h"
 #include "squashfs_swap.h"
@@ -159,6 +160,19 @@ static int read_xattrs_from_system(char *filename, struct xattr_list **xattrs)
 			MEM_ERROR();
 		xattr_list = x;
 
+
+		// ignore uid and gid escapes
+		static const char XATTR_ESCAPE_UID[] = "user.escape.uid";
+		static const char XATTR_ESCAPE_GID[] = "user.escape.gid";
+		if(
+			!strncmp(p, XATTR_ESCAPE_UID, sizeof(XATTR_ESCAPE_UID)-1) ||
+			!strncmp(p, XATTR_ESCAPE_GID, sizeof(XATTR_ESCAPE_GID)-1)
+		) {
+			p += strlen(p) + 1;
+			i--;
+			continue;
+		}
+
 		xattr_list[i].type = get_prefix(&xattr_list[i], p);
 		p += strlen(p) + 1;
 		if(xattr_list[i].type == -1) {
